#include<iostream>
#include<cstdlib>
////crc


#include<cstring>
#include<cmath>

using namespace std;

int intArrayToNum(int ARR[],int size)
{
 int num=0;
 for(int i=0;i<size;i++)
 {
  num += ARR[i]*pow(2,i);
 }

return num;
}

int main()
{



int n;


cout<<" ENTER THE NUMBER OF BITS OF THE GENERATOR POLYNOMIAL"<<endl;
           
           cin>>n;
           int arr2[n];
           cout<<" ENTER THE BITS FOR THE GENERATOR POLYNOMIAL"<<endl;
 
           for(int i=0;i<n;i++)  
           {
  
           cin>>arr2[i];
            while(arr2[i]!= 0 && arr2[i]!=1)
            {
   
            cout<<" ERROR : YOU ENTERED AN INVALID INPUT( ENTER ONLY 0'S OR 1'S )"<<endl; 
            cin>>arr2[i];
            }
  
           }


  
    int m;
	cout<<" ENTER THE NUMBER OF INFORMATION BITS "<< endl;
	cin>>m;

    
	int arr1[m+n-1];

	cout<<" ENTER THE INFORMATION BITS :"<<endl;
	for(int i=0;i<m;i++)
	{
	cin>>arr1[i];
	while( arr1[i]!=0 && arr1[i]!=1)
	{
	 cout<<" ERROR : THE BITS ARE ONLY OF THE FORM (1'S OR 0'S) "<<endl;
	 cin>>arr1[i];
	 }
	 
	 }
	 
	 int size = m+n-1;
	 
	 for(int i=m;i<size;i++)
	 arr1[i] = 0;
	 
	 int temp[m+n-1];
	 for(int i=0;i<size;i++)
	 temp[i]=arr1[i];
	 
	 
	 
  cout<<endl<<endl<<"=================SENDER SIDE===================="<<endl;	 
  cout<<" DIVIDEND (AFTER APPENDING ZEROES ):"<<" ";
  for(int i=0;i<size;i++)
  cout<<" "<<arr1[i];
  
  cout<<endl;
  
  cout<<" DIVISOR :"<<" ";
  for(int i=0;i<n;i++)
  cout<<" "<<arr2[i];
  
  cout<<endl;
   
   int j,k;
   for(int i=0;i<m;i++)
   {
   j=0;
   k=i;
   if(arr1[k]>=arr2[j])
   {
    for(j=0,k=i;j<n;j++,k++)
    {
     if((arr1[k]==1 && arr2[j]==1) || (arr1[k]==0 && arr2[j]==0))
     {
      arr1[k]=0;
     }
     else
     {
      arr1[k]=1;
     }
    }
    
    }
    
   }
   int crc[n-1];
   int x = m;
   for(int i=0;i<n-1;i++)
   {
    crc[i]=arr1[x++];
   }
   
   cout<<" CRC BITS ARE :  ";
   for(int i=0;i<n-1;i++)
   {
 
   cout<<" "<<crc[i];
   
   } 
  
   int c=0;
   for(int i=m;i<size;i++)
   {
   temp[i]=crc[c++];
   }
   
   
   cout<<endl<<" TRANSMITTED MESSAGE :";
   for(int i=0;i<size;i++)
   cout<<" "<<temp[i];
   
   cout<<endl<<endl<<"==========RECIEVER SIDE====================="<<endl;
   j=k=0;
   

   int choice;
   cout<<"==========SELECT ONE OPTION==========="<<endl;
   cout<<"(1) random codeword by reciever side"<<endl;
   cout<<"(2) same codeword as generated by sender side"<<endl;
   int arr3[size];

   cin>>choice;

  if(choice==1)
  {

   for(int i=0;i<size;i++)
   arr3[i] = rand()%2;
  }
 else if(choice==2)
 {
  for(int i=0;i<size;i++)
   {
    arr3[i] = temp[i];
   }
 }



  
   cout<<" RECIEVING MESSAGE :";
   for(int i=0;i<size;i++)
   {
   cout<<" "<<arr3[i];
   }
   
   
   for(int i=0;i<m;i++)
   {
   
    j=0;
    k=i;
    if(arr3[k]>=arr2[j])
    {
    for(j=0,k=i;j<n;j++,k++)
    {
    
    if((arr3[k]==1 && arr2[j]==1) || (arr3[k]==0 && arr2[j]==0))
    {
     arr3[k]=0;
    }
    else
    {
     arr3[k]=1;
    }
   
   }
   
   }
   
  }

  int rem[n-1];
  for(int i=0;i<n-1;i++)
  rem[i] = arr3[m++];
  
  cout<<endl<<" REMAINDER IS : ";
  for(int i=0;i<n-1;i++)
  cout<<" "<<rem[i];
  
  int remain = intArrayToNum(rem,n-1);
  
  
  int flag=0;
  
  if(remain == 0)
  cout<<endl<<" NO ERROR DETECTED "<<endl;
  
  else
  cout<<endl<<" ERROR DETECTED (SINCE REMAINDER IS NOT ZERO )"<<endl;
  
   return 0;
   
   
   }



///crc8

#include<iostream>
#include<cstdlib>
#include<ctime>

using namespace std;
int Xor(int x,int y){
	if(x==y)
		return 0;
	else
		return 1;
}
int main(){
	int d1[40],d2[40],q[20],r[10],rem[10],m,n,i,j,size;
	int ch,index1,index2,b_start,len;
	do{
		cout<<"\n==>> DATAWORD_MENU <<=="
        	<<"\n1).User generated"
        	<<"\n2).System generated"
        	<<"\n3).Exit"
        	<<"\n\nEnter your choice ::\t";
    	cin>>ch;
    	if(ch==3){
    		cout<<"\nEXIT!!!";
    		exit(0);
		}
    	cout<<"Enter number of bits of DataWord ::\t";
    	cin>>m;
    	while(m<2||m>40){
        	cout<<"\nIncorrect input";
        	cout<<"\nEnter no.of bits for dividend (>2&&<40) ::";
        	cin>>m;
   	 	}
    	switch(ch){
        	case 1: cout<<"\nEnter the DataWord ::\n";
        			//d1[0]=1;
        			//cout<<d1[0]<<endl;
                	for(i=0;i<m;i++){
                    	cin>>d1[i];
                    	while(d1[i]!=0&&d1[i]!=1){
                        	cout<<"\nPlease enter 0 or 1 only\n";
                        	cin>>d1[i];
                    	}
                	}
                	//d1[m-1]=1;
                	//cout<<d1[m-1]<<endl;
                	break;
        	case 2: for(int i=1;i<m-1;i++){
                    	srand(time(NULL)+i);
                    	d1[i]=rand()%2;
                	}
                	d1[0]=d1[m-1]=1;
               	 	break;
        	default:cout<<"\nWRONG CHOICE ENTERED!!!\n";
                    exit(0);
    	}
    	cout<<"\nDATAWORD :: \t";
    	for(i=0;i<m;i++)
        	cout<<d1[i];
    	cout<<"\n\n==>> GENERATOR_MENU <<=="
    		<<"\n1). 1-bit(to show it doesn't affect)"
    		<<"\n2). User-Generated"
    		<<"\n3). System-Generated"
    		<<"\n4). CRC-8"
    		<<"\n5). CRC-16"
    		<<"\n\n==>> Enter your choice ::\t";
    	cin>>ch;
    	switch(ch){
    		case 1:	{
    					cout<<"\nNumber of bits for Generator ::\t1";
						n=1;
						cout<<"\nGenerator Polynomial :: 1\n";
						int d2[]={1};
					}
    				break;
    		case 2:	{
    					do{
    						cout<<"\nEnter the number of bits for Generator ::\t";
    						cin>>n;
    						if(n<2){
    							cout<<"\nNumber of bits for Generator should be(>=2)!!!\n";
							}
						}while(n<2);
    					cout<<"\nEnter Generator Polynomial ::\n";
    					for(i=0;i<n;i++){
                    		cin>>d2[i];
                    		while(d2[i]!=0&&d2[i]!=1){
                        		cout<<"\nPlease enter 0 or 1 only\n";
                        		cin>>d2[i];
                    		}
                    	}
                    	cout<<"\nGenerator Polynomial :: \t";
						for(i=0;i<n;i++)
							cout<<d2[i];
					}
					break;
    		case 3:	{
    					do{
    						cout<<"\nEnter the number of bits for Generator ::\t";
    						cin>>n;
    						if(n<2){
    							cout<<"\nNumber of bits for Generator should be(=>2)!!!\n";
							}
						}while(n<2);
						d2[0]=1;d2[n-1]=1;
    					for(i=1;i<n-1;i++){
                    		srand(time(NULL)+i);
                    		d2[i]=rand()%2;
                    	}
                    	cout<<"\nGenerator Polynomial :: \t";
						for(i=0;i<n;i++)
							cout<<d2[i];
					}
    				break;
    		case 4:	{
						cout<<"\nNumber of bits for Generator ::\t9";
						n=9;
						cout<<"\nGenerator Polynomial :: 100000111\n";
						int d2[]={1,0,0,0,0,0,1,1,1};
					}
    				break;
    		case 5:	{
    					cout<<"\nNumber of bits for Generator ::\t17";
						n=17;
						cout<<"\nGenerator Polynomial :: 10001000000100001\n";
						int d2[]={1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1};
					}
    				break;
    		default:cout<<"\nWRONG CHOICE ENTERED!!!";
					return 1;
    	
		}
		for(i=0;i<n-1;i++){
			d1[m+i]=0;
		}
		size=m+n-1;
		cout<<"\nInitial CodeWord ::\t";
		for(i=0;i<size;i++){
			cout<<d1[i];
		}
		int k=n-1;
    	for(i=0;i<n;i++)
       		r[i]=d1[i];
		for(i=0;i<m;i++){
			if(r[i]==1){
				for(j=n-1;j>=0;j--){
				  	r[i+j]=Xor(r[i+j],d2[j]);
				}
				q[i]=1;
			}
			else{
				q[i]=0;
			}
			k++;
			if(k<size)
				r[k]=d1[k];
		}
		cout<<"\n==>> Remainder ::\t";
		for(j=m,i=0;j<size;j++,i++){
			rem[i]=r[j];
			cout<<rem[i];
		}
		for(i=0;i<n-1;i++){
			d1[m+i]=rem[i];
		}
		cout<<"\nFinal CodeWord ::\t";
		for(i=0;i<size;i++){
			cout<<d1[i];
		}
		cout<<"\n\n==>> ERROR_MENU <<=="
			<<"\n1). 1-Bit Error"
			<<"\n2). 2-Bit Error (isolated)"
			<<"\n3). Burst Error"
			<<"\n\n ==>> Enter your choice ::\t";
		cin>>ch;
		switch(ch){
			case 1: cout<<"\n==>>Random Error At Bit :: \t";
					srand(time(NULL));
					index1 = rand()%size+1;			//generating random Error
					cout<<index1;
					d1[index1-1]=1-d1[index1-1];
					break;
			case 2:	cout<<"\n==>>Random Error At Bits :: \t";
					srand(time(NULL));
					index1 = rand()%size+1;			//generating random Error
					cout<<index1<<"  ";
					do{
						index2=rand()%size+1;
					}while(index2==index1||index2==index1+1||index2==index1-1);
					cout<<index2;
					d1[index1-1]=1-d1[index1-1];
					d1[index2-1]=1-d1[index2-1];
					break;
			case 3:	do{
						cout<<"\nEnter the Start Location ::\t";
						cin>>b_start;
						cout<<"\nEnter the Length of the Error ::\t";
						cin>>len;
						if(b_start<0||len<0||b_start+len>=size){
							cout<<"WRONG INPUT!!!!";
						}
					}while(b_start<0||len<0||b_start+len>=size);
					d1[b_start-1]=1-d1[b_start-1];
					d1[b_start+len-2]=1-d1[b_start+len-2];
					for(i=b_start;i<b_start+len-1;i++){
            	        srand(time(NULL)+i);
                	    d1[i]=rand()%2;
               		}
               		ch=2;
					break;
			default:cout<<"\nWRONG CHOICE ENTERED!!!";
					return 1;	
		}
		cout<<"\nRecieved CodeWord ::\t";
		for(i=0;i<size;i++)
			cout<<d1[i];
		//again receiver end's divide
		k=n-1;
    	for(i=0;i<n;i++)
    	    r[i]=d1[i];
		for(i=0;i<m;i++){
			if(r[i]==1){
				for(j=n-1;j>=0;j--){
				  	r[i+j]=Xor(r[i+j],d2[j]);
				}
				q[i]=1;
			}
			else{
				q[i]=0;
			}
			k++;
			if(k<size)
			r[k]=d1[k];
		}
		bool flag=true;
		cout<<"\n==>> Remainder ::\t";
		for(j=m,i=0;j<size;j++,i++){
			rem[i]=r[j];
			cout<<rem[i];
			if(rem[i]==1){
				flag=false;
			}
		}
		if(flag)
			cout<<"\n\n==>> NO ERROR DETECTED !!!\n";
		else
			cout<<"\n\n==>>	ERROR DETECTED !!!\n";	
	}while(ch!=3);
	return 0;
}


///hamming code

#include<iostream>
#include<cstdlib>
#include<ctime>
//#include<windows.h>
#include<math.h>
using namespace std;

void checkBits(int b[],int x,int r){
	int i=-1;
	while(x>0){
		b[++i]+=x%2;
		x/=2;
	}
}

int main(){
	int ch,n,*a,*b,*c,m,r,z=0;
	cout<<"\t\tMENU"
        <<"\n1).User generated"
        <<"\n2).System generated"
        <<"\n\nEnter your choice ::\t";
    cin>>ch;
    cout<<"\nEnter the length of the Dataword ::\t";
	cin>>n;
	for(r=0;n+r>pow(2,r)-1;++r);
	m=n+r;
	a=new int[m];
    switch(ch){
        case 1: cout<<"\nEnter the DataWord ::\n";
                for(int i=0;i<m;i++){
                    if(i+1==pow(2,z)){
                        a[i]=-1;
                        z++;
                    }
                    else{
                        cin>>a[i];
                    }
                }
                break;
        case 2: srand(time(NULL));
                for(int i=0;i<m;i++){
                    if(i+1==pow(2,z)){
                        a[i]=-1;
                        z++;
                    }
                    else{
                        a[i]=rand()%2;
                    }
                }
                break;
        default: cout<<"\nWRONG CHOICE ENTERED!!!\n";
                    exit(0);
    }


	cout<<"\nDataWord Code :: ";
	z=0;
	for(int i=0;i<m;i++){
		if((i+1)==pow(2,z))
			z++;
		else
			cout<<a[i];
	}
	cout<<"\nNumber of Redundant Bits required ::\t";
	cout<<r;
	b=new int[r];
	c=new int[r];
	for(int i=0;i<r;i++){
		b[i]=0;
		c[i]=0;
	}

	for(int i=0;i<m;i++){
		if(a[i]==1)
			checkBits(b,(i+1),r);
	}
	//Sleep(400);
	cout<<"\n==>> Check Bits Are :: (following even parity)";
	for(int i=0;i<r;i++){
		if(b[i]%2==0)
			b[i]=0;
		else
			b[i]=1;
		cout<<"\nr["<<i+1<<"] = "<<b[i];
	}
	//Sleep(200);
	cout<<"\n==>> CodeWord :: \t\t\t";
	for(int i=0;i<r;i++){
		int k=pow(2,i)-1;
			a[k]=b[i];
	}
	for(int i=0;i<m;i++){
		//Sleep(200);
		cout<<a[i];
	}
	//Sleep(500);
	cout<<"\n==>> Random Error At Bit :: \t\t";
	srand(time(NULL));
	int index = rand()%m+1;	
	//Sleep(200);		//generating random Error
	cout<<index;
	a[index-1]=1-a[index-1];
	cout<<"\n==>> Recieved Incorrect CodeWord ::\t";
	for(int i=0;i<m;i++){
		//Sleep(200);
		cout<<a[i];
	}
	z=0;
	for(int i=0;i<r;i++){			//setting b with new check bits of recieved codeword
		int k=pow(2,i)-1;
			b[i]=a[k];
	}
	for(int i=0;i<m;i++){
		if((i+1)==pow(2,z))
			z++;
		else if(a[i]==1){
			checkBits(c,(i+1),r);
		}
	}
	for(int i=0;i<r;i++){
		if(c[i]%2==0)
			c[i]=0;
		else
			c[i]=1;
	}
	int sum=0;
	for(int i=0;i<r;i++){
		if(b[i]!=c[i])
			sum+=pow(2,i);
	}
	cout<<"\n==>> Error At Bit :: \t\t\t"<<sum;
	a[sum-1]=1-a[sum-1];
	cout<<"\n\n==>> Corrected CodeWord :: \t\t";
	for(int i=0;i<m;i++){
		//Sleep(200);
		cout<<a[i];
	}
	return 0;
}


///parity

#include<iostream>
#include<cstdlib>
using namespace std;

int main()

  {
	int size;
		cout<<" ENTER THE NUMBER OF BITS "<<endl;
		cin>>size;

	int arr[size];
		cout<<" ENTER THE INFORMATION  :"<<endl;

    		for(int i=0;i<size;i++)
    		{
     			cin>>arr[i];
     			
                     while( arr[i] != 1 && arr[i] != 0)
    			 {
       			  cout<<" ERROR: BITS ONLY OF THE FORM OF 0'S  AND 1'S "<<endl;
                          cin>>arr[i];

     			}
  		 }

 	int count1 =0;
 		cout<<" YOUR INFORMATION  IS :"<<endl;

    		for(int i=0;i<size;i++)
    		{
    		    cout<<" "<<arr[i];

     		    if(arr[i] == 1)
                    count1++;
    		}

        cout<<endl;

	string parity ="";
		 cout<<" ENTER THE PARITY TYPE :"<<endl;
 		 cin>>parity;

 	int parityBit;

    		if( parity=="even" )
    			{
    			  if(count1%2==0)
   			  parityBit = 0;
    		          else
   			  parityBit =1;
    			}

   		if ( parity=="odd")
   		 {
     			if(count1%2==1)
     			 parityBit =0;

     			else
     			parityBit = 1;
    		}



 	cout<<" PARITY TYPE :";
 	 cout<<" "<<parity<<endl;



		cout<<endl;

		int arr1[size+1];

		for(int i=0;i<size+1;i++){
			if(i<size)
			arr1[i] = arr[i];
			
                        else
			arr1[i] = parityBit;
			
                  }

 
 		cout<<" YOUR CODEWORD INFORMATION IS :";
   		 for(int i=0;i<size+1;i++)
     			cout<<" "<<arr1[i];
     		
                 cout<<endl;


	 int arr2[size+1];

      		for(int i=0;i<size;i++)
      			{
      			 arr2[i] = rand()%2;

      			}

 
	int count2=0;

		 cout<<" THE RECIEVING INFORMATION IS :";
     			 for(int i=0;i<size+1;i++)
      				{
         			 if(arr2[i]==1)
          			  count2++;
                                  cout<<" "<<arr2[i];
                                }


                 if(parity =="odd"){
                   	if((count1+parityBit)%2!=0 && (count2)%2!=0)
                   		{

                  		 cout<<"\n NO ERROR DETECTED"<<endl;
                   		}
                   	else
                    		 cout<<"\n ERROR DETECTED : PARITY VIOLATION"<<endl;
                 }

                 
                 if(parity =="even"){
                   	if((count1+parityBit)%2==0 && (count2)%2==0)
                  		 {

                   		cout<<"\n NO ERROR DETECTED"<<endl;
                   		}
                   	else
                     		cout<<"\n ERROR DETECTED : PARITY VIOLATION"<<endl;
                 }


 return 0;

 }


///modulo addition


#include<iostream>
#include<string.h>
using namespace std;
void error_detect(char trans[20],char rec[20],int siz){
	int ctr=0;
	for(int i=0;i<siz;i++){
		if(trans[i]!=rec[i]){
			ctr++;
			cout<<"\n("<<ctr<<"). Error occured at bit no. "<<i;
		}
	}
	cout<<"\n\nTotal number of errors are :: "<<ctr;
}
int main(){
	int size;
	char t[20],r[20];
	cout<<"Enter the size of Signal :: \t";
	cin>>size;
	cout<<"Enter the transmitted signal :: \t";
	for(int i=0;i<size;i++)
		cin>>t[i];
	cout<<"Enter the recieved signal :: \t";
	for(int i=0;i<size;i++)
		cin>>r[i];
	error_detect(t,r,size);
	return 0;
}



////division


#include<iostream>
using namespace std;
int Xor(int x,int y){
	if(x==y)
		return 0;
	else 
		return 1;
}
int main(){
	int d1[20],d2[20],q[20],r[10],rem[10],m,n,i,j;
	cout<<"Enter no.of bits for dividend ::\t";
    cin>>m;
    while(m<0||m>20)
    {
    	cout<<"\nIncorrect input";
    	cout<<"\nEnter no.of bits for dividend (<20) ::";
        cin>>m;
	}
	cout<<"\nEnter the dividend ::\n";
	for(i=0;i<m;i++){
		cin>>d1[i];
	    while(d1[i]!=0&&d1[i]!=1){
		    cout<<"\nPlease enter 0 or 1 only";
		    cin>>d1[i];
		}
	}
	cout<<"\nEnter no.of bits for divisor:";
	cin>>n;
	while(n<0||n>20||n>m){
    	cout<<"\nIncorrect input";
    	cout<<"\nEnter no.of bits for divisor:";
        cin>>n;
	}
	cout<<"\nEnter the divisor ::\n";
	for(i=0;i<n;i++){
		cin>>d2[i];
		while(d2[i]!=0&&d2[i]!=1){
		  	cout<<"\nPlease enter 0 or 1 only";
		   	cin>>d2[i];
		}
	}
	int k=n-1;
    for(i=0;i<n;i++){
        r[i]=d1[i];
    }
	for(i=0;i<m-n+1;i++){
		if(r[i]==1){
			for(j=n-1;j>=0;j--){
			  	r[i+j]=Xor(r[i+j],d2[j]);
			}
			q[i]=1;
		}
		else{
			q[i]=0;
		}
		k++;
		if(k<m)
			r[k]=d1[k];
	}
	cout<<"\n\n==>> Quotient ::\t";
	for(i=0;i<m-n+1;i++)
	   cout<<q[i]; 
	cout<<"\n==>> Remainder ::\t";
	for(j=m-n+1,i=0;j<m;j++,i++){
		rem[i]=r[j];
		cout<<rem[i];  
	}
	return 0;
}


///gobackn


#include<iostream>
#include<stdlib.h>
#include<time.h>
#include<math.h>
using namespace std;

const int TOT_FRAMES=500;
const int FRAMES_SEND=16;

class gobkn{
	private:
		int fr_send_at_instance;
		int arr[TOT_FRAMES];
  		int arr1[FRAMES_SEND];
  		int sw;	//sender's window start
  		int rw; //reciever's window start
	public:
  		gobkn();
  		void input();
  		void sender(int m);
		void reciever(int m);
};
gobkn :: gobkn(){
	sw = 0;
	rw = 0;
}
void gobkn :: input(){
 	int n;  // no of bits for the frame
 	int m;  // no of frames from n bits
	do{
		cout <<"==>> Enter the number of bits for the Sequence Number ::\t";
 		cin >> n;
 		if(n>5){
 			cout<<"(ERROR :: Sequence Number Must Be less than 6)\n";
		}
	}while(n>5);
	m = pow (2 , n);
	int t = 0;
	fr_send_at_instance=m-1; 
	cout<<"\n==>> Number of frames sent in one go ::\t"<<fr_send_at_instance<<"\n\n";
	for (int i = 0 ; i < TOT_FRAMES ; i++){
		arr[i] = t;
		t = (t + 1) % m; //initializing arr with 0-2^n-1 multiple times
	}
	sender(m);
}

void gobkn :: sender(int m){
	cout<<"\n<<== SENDER ==>>\n";
	int j = 0;
	for (int i = sw ; i < sw + fr_send_at_instance ; i++){
		arr1[j++] = arr[i];//sender start to total frames
	}
	for (int i = 0 ; i < j ; i++){
		cout << "SENDER : Frame " <<arr1[i]<<" SENT!!!\n";		
	}
	reciever (m);
}

void gobkn :: reciever(int m){
	cout<<"\n\t\t\t\t<<== RECIEVER ==>>\n";
	//time_t t;

	//srand((unsigned) time(&t));
	srand(rw); 

	int f = rand() % fr_send_at_instance;

   // if = 4 frame is discarded 
   // else they are correctly recieved

	if (f != 4){

		int i=0;

		for (i = 0; i < fr_send_at_instance; i++){
			if (rw == arr1[i]){
				cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " recieved correctly\n";
				rw = (rw + 1) % m;
			}else{
				cout << "\t\t\t\tRECIEVER : Duplicate frame " << arr1[i] << " discarded\n";
			}
		}

		f = rand() % fr_send_at_instance;

		// if f belongs to second half then
		//     all ack after this (incl this one) lost
		// else
		//     all recieved
   
		if (f>fr_send_at_instance/2){

			cout << "\t\t\t\t(Acknowledgement " << arr1[f] << " & all after this lost)\n";
			cout << "\t\t\t\t (SENDER TIMEOUTS --> RESEND THE FRAME)\n";
			sw = arr1[f];
		}

		else{
			sw = (sw + fr_send_at_instance) % m;
			cout << "\t\t\t\t(Acknowledgement " << arr[rw] << " is Sent!!!)\n";
		}
	}else{
		int f1 = rand() % fr_send_at_instance;

		// f1 gives index of the frame being lost
   		
		for (int i = 0 ; i < f1 ; i++){
			if (rw == arr1[i]){
				cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " recieved correctly\n";
				rw = (rw + 1) % m;
			}else{
				cout << "\t\t\t\tRECIEVER : Duplicate frame " << arr1[i] << " discarded\n";
			}
  		}

		f = rand() % 2;
		
    	// f == 0 frame damaged
    	// else frame lost

		if (f == 0){
			cout<<"\t\t\t\tRECIEVER : Frame " << arr1[f1] << " damaged\n";
			cout<<"\n\t\t\t\tRECIEVER : Damaged frame " << arr1[f1] << " discarded\n\n";
		}
		else
			cout << "\t\t\t\t            (Frame " << arr1[f1] << " lost)\n";
		for (int i = f1 + 1 ; i < fr_send_at_instance ; i++)
			cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " discarded\n";
		cout << "\t\t\t\t (SENDER TIMEOUTS --> RESEND THE FRAME)\n";
		sw = arr1[f1];
	}
	char ch;
	cout<<"\n==>> Do you want to continue(y/n) ::\t";
	cin>>ch;
	if(ch=='y')
		sender(m);
	else
		exit(0);
}
int main(){
	gobkn obj;
	obj.input();
	return 0;
}


///stopnwaitnoisy

#include<iostream>
//#include<conio.h>
#include<stdlib.h>
//#include<windows.h>
using namespace std;
void show_wait(){
	for(int i=0;i<5;i++){
		cout<<".";
		//Sleep(300);
	}
}
int r=1;
int receiver(int seq){
	//Sleep(100);
    int x=rand()%10;			
    if(x<5){
        cout<<"\n\t\tReceived frame with sequence no :: "<<seq;
        r=1-r;
        cout<<"\n\t\tACKNOWLEDGMENT "<<r<<" sending";
        show_wait();
    }
    else if(x>5&&x<8){      
        cout<<"\n\t\tFrame lost!!";
        cout<<"\n\t\tTimeout!!!";
    }
    else{
    	cout<<"\n\t\tAcknowledgement lost!!";
        cout<<"\n\t\tTimeout!!!";
    }
    return r;   
}
void sender(){
    int n;
    cout<<"##**##Sender##**##\n";
    cout<<"\nEnter the number of frames :: ";
    cin>>n;
    int arr[n];
    cout<<"\nConnecting";
    show_wait();
    cout<<"\nCONNECTED!!!";
    for(int i=0;i<n;i++){
        if(i%2==0)
            arr[i]=1;
        else
            arr[i]=0;
    }
    for(int i=0;i<n;i++){
    	//Sleep(100);
     	cout<<"\n\nSending frame with sequence number "<<arr[i];
     	show_wait();
        int ack=receiver(arr[i]);
        while(ack==arr[i]){
        	//Sleep(100);
     		cout<<"\n\nResending frame with sequence number "<<arr[i];
     		show_wait();
     		ack=receiver(arr[i]);
		}
    }
    cout<<"\nDisconnecting";
    show_wait();
    cout<<"\nDISCONNECTED!!!";
   // Sleep(1000);
	cout<<"\n\n<<<--**********************- TRANSMISSION COMPLETE -**********************-->>>";
}
int main(){
    sender();
    //getch();
    return 0;
}


//stopnwaitnoiseless

#include<iostream>
#include <stdafx.h>
#include <windows.h>
using namespace std;

void show_wait(){
	for(int i=0;i<5;i++){
		cout<<".";
		Sleep(300);
	}
}
class Receiver
{
	int ack;
	
	public:
		void receive(int x)
		{
			cout<<"\n\t\t\t\t\t\tReceived "<<x;
			ack=x;
		}
		
		int feedback()
		{
			cout<<"\n\t\t\t\t\t\tSending feedback";
			show_wait();
			return (1-ack);
		}
};

class Sender
{
	int c;
	Receiver r;
	
	public:
		Sender()
		{
			c=0;
		}
		void send()
		{
			cout<<"\nSending "<<c;
			show_wait();
			r.receive(c);
		}
		
		void getAck()
		{
			c=r.feedback();
			cout<<"\nReceived Ack "<<c;
		}
};


int main()
{
	int num;
	Sender s;
	cout<<"\t\t** ## ** STOP AND WAIT NOISELESS ** ## **";
	cout<<"\n\n==>> Enter number of packets to be sent ::\t";
	cin>>num;
	cout<<"\n\nSENDER\t\t\t\t\t\tRECEIVER";
	
	for(int i=0;i<num;i++){
		cout<<"\n==>>PACKET "<<(i+1);
		s.send();
		s.getAck();
	}
	cout<<"\n\n<<<--**********************- TRANSMISSION COMPLETE -**********************-->>>";
	return 0;
}



////selective repeat

#include<iostream>
#include<stdlib.h>
#include<time.h>
#include<math.h>
const int TOT_FRAMES=500;
const int FRAMES_SEND=16;
using namespace std;
class sel_repeat{
	private:
		int fr_send_at_instance;
		int arr[TOT_FRAMES];
		int send[FRAMES_SEND];
		int rcvd[FRAMES_SEND];
		char rcvd_ack[FRAMES_SEND];
		int sw;
		int rw;       
	public:
		void input();
		void sender(int);
		void receiver(int);
};
void sel_repeat::input(){
	int n;     //no. of bits for the frame
	int m;    //no. of frames from n bits

	do{
		cout <<"==>> Enter the number of bits for the Sequence Number ::\t";
		cin >> n;
		if(n>5){
			cout<<"(ERROR :: Sequence Number Must Be less than 6)\n";
		}
	}while(n>5);

	m=pow(2,n-1);
	int t=0;
	fr_send_at_instance=m;

	for(int i=0;i<TOT_FRAMES;i++){
		arr[i]=t;
		t=(t+1)%m;
	}
	for(int i=0;i<fr_send_at_instance;i++){
		send[i]=arr[i];
		rcvd[i]=arr[i];
		rcvd_ack[i]='n';
	}
	rw=sw=fr_send_at_instance;
	sender(m);
}
void sel_repeat::sender(int m){
	cout<<"\n<<== SENDER ==>>\n";
	for(int i=0;i<fr_send_at_instance;i++){
		if(rcvd_ack[i]=='n')
			cout<<"SENDER : Frame "<<send[i]<<" is sent\n";
	}
	receiver(m);
}

void sel_repeat::receiver(int m){
	cout<<"\n\t\t\t\t<<== RECIEVER ==>>\n";
	time_t t;
	int f,j,f1,a1;
	char ch;
	srand((unsigned)time(&t));
	for(int i=0;i<fr_send_at_instance;i++){
		if(rcvd_ack[i]=='n'){
			f=rand()%10;
			//if f=5 frame is discarded for some reason
			//else frame is correctly recieved
			if(f!=5){
				for(j=0;j<fr_send_at_instance;j++){
					if(rcvd[j]==send[i]){
						cout<<"\t\tReciever : Frame "<<rcvd[j]<<" recieved correctly!!!\n";
						rcvd[j]=arr[rw];
						rw=(rw+1)%m;
						break;
					}
				}
				if(j==fr_send_at_instance)
					cout<<"\t\tReciever : Duplicate Frame "<<send[i]<<" discarded!!!\n";
				a1=rand()%5;
				//if al==3 then ack is lost
				//else recieved
				if(a1==3){
					cout<<"\t\t(Acknowledgement "<<send[i]<<" lost)\n";
					cout<<"\t\t(Sender timeouts-->Resend the frame)\n";
					rcvd_ack[i]='n';
				}else{
					cout<<"\t\t(Acknowledgement "<<send[i]<<" recieved)\n";
					rcvd_ack[i]='p';
				}
			}else{
				int ld=rand()%2;
				//if =0 then frame damaged
				//else frame lost
				if(ld==0){
					cout<<"\t\tReceiver : Frame "<<send[i]<<" is damaged\n";
					cout<<"\t\tReceiver : Negative Acknowledgement "<<send[i]<<" sent\n";
				}else{
					cout<<"\t\t  (Frame : "<<send[i]<<" is lost)\n";
					cout<<"\t\t(Sender Timeout--------> please resend frame)\n";
				}
				rcvd_ack[i]='n';
			}
		}
	}
	for(j=0;j<fr_send_at_instance;j++){
		if(rcvd_ack[j]=='n')
			break;
	}
	int i=0;
	for(int k=j;k<fr_send_at_instance;k++){
		send[i]=send[k];
		if(rcvd_ack[k]=='n')
			rcvd_ack[i]='n';
		else
			rcvd_ack[i]='p';
			i++;
	}
	if(i!=fr_send_at_instance){
		for(int k=i;k<fr_send_at_instance;k++){
			send[k]=arr[sw];
			sw=(sw+1)%m;
			rcvd_ack[k]='n';
		}
	}
	cout<<"\nDo you want to continue ::\t";
	cin>>ch;
	cout<<"\n";
	if(ch=='y')
		sender(m);
	else
		exit(0);
}
int main(){
	sel_repeat sr;
	sr.input();
}

///dvr

#include<iostream>
using namespace std;

int total,target,adv,p;
int delay[20][2],table[20][20];
int RT1[20],RT2[20];

void input(){
	cout<<"Enter the total number of routers in the network ::\t";
	cin>>total;
	cout<<"\nEnter the Vertex Whose routing table is to be Found ::\t";
	cin>>target;
	cout<<"\nEnter the number of routers adjacent to Target Vertex "<<target<<" ::\t";
	cin>>adv;
	
	for(int i=0;i<adv;i++){
		cout<<"\nEnter the number of "<<i+1<<"th adjacent router ::\t";
		cin>>p;
		delay[i][0]=p;
		cout<<"\nFill the routing table for router number "<<p<<" ::\n";
		for(int j=0;j<total;j++){
			cout<<j<<".\t";
			if(j==p){
				table[p][j]=0;
				cout<<table[p][j]<<endl;
				continue;
			}
			cin>>table[p][j];
		}
		cout<<"\nEnter the Delay from Target router "<<target<<" to Adjacent Vertex "<<p<<" ::\t";
		cin>>delay[i][1];
	}
}

void DVR(){
	for(int i=0;i<total;i++){
		RT1[i]=-1;
		RT2[i]=-1;	
	}
	
	for(int i=0;i<adv;i++){
		RT1[delay[i][0]]=delay[i][1];
		RT2[delay[i][0]]=delay[i][0];
	}
	RT1[target]=0;
	RT2[target]=target;
	for(int y=0;y<total;y++){
		if(RT1[y]==-1){
			int min=99999,min_point=0;
			for(int i=0;i<adv;i++){
				if(min>table[delay[i][0]][y]+delay[i][1]){
					min=table[delay[i][0]][y]+delay[i][1];
					min_point=delay[i][0];	
				}
			}
			RT1[y]=min;
			RT2[y]=min_point;
		}
	}
}

void result(){
	cout<<"\n==>>Routing table for "<<target<<" is :";
	for(int i=0;i<total;i++){
		cout<<"\n\t"<<i<<".\t"<<RT1[i]<<"\t";	
		if(RT2[i]==target){
			cout<<"-";
		}else{
			cout<<RT2[i];
		}
	}
}

int main(){
	input();
	DVR();
	result();
	return 0;
}

///dijkistraDU

 #include<iostream>
//#include<conio.h>
#include<stdio.h>
using namespace std;
int shortest(int ,int);
int cost[10][10],dist[20],i,j,n,k,m,S[20],v,totcost,path[20],p;
main()
{                                                                  
int c;
cout <<"enter no of vertices";
cin >> n;
cout <<"enter no of edges";
cin >>m;
cout <<"\nenter\nEDGE Cost\n";
for(k=1;k<=m;k++)
{
cin >> i >> j >>c;
cost[i][j]=c;
}
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(cost[i][j]==0)
cost[i][j]=31999;
cout <<"enter initial vertex";
cin >>v;
cout << v<<"\n";
shortest(v,n);
 }

int shortest(int v,int n)
{
int min;
for(i=1;i<=n;i++)
{
S[i]=0;
dist[i]=cost[v][i];
}
path[++p]=v;
S[v]=1;
dist[v]=0;
for(i=2;i<=n-1;i++)
{
k=-1;
min=31999;
for(j=1;j<=n;j++)
{
if(dist[j]<min && S[j]!=1)
{
min=dist[j];
k=j;
}
}                                                         
if(cost[v][k]<=dist[k])
p=1;
path[++p]=k;
for(j=1;j<=p;j++)
cout<<path[j];
cout <<"\n";
//cout <<k;
S[k]=1;
for(j=1;j<=n;j++)
if(cost[k][j]!=31999 && dist[j]>=dist[k]+cost[k][j] && S[j]!=1)
 dist[j]=dist[k]+cost[k][j];
}
}


////diskistra_sprouting

#include<iostream>
#include<iomanip>
using namespace std;
int n,source;
int **adj;
class vertex{
	public:
	int dist; 		//distance from source;
	int visited; 
};
vertex *v;
int *arr;
int array_size;
void input(){
	cout<<"Enter the number of vertices in the graph ::\t";
	cin>>n;
	v=new vertex[n];
	arr=new int[n];
	array_size=n;
	adj=new int*[n];
	for(int i=0 ; i<n; i++){
		adj[i]=new int[n];
	}
	cout<<"\nEnter the Adjacency Matrix...(-1 if not connected)";
	for(int i=0;i<n;i++){
		for(int j=0;j<=i;j++){
			if(i==j){
				adj[i][j]=0;
				continue;
			}
			cout<<"\nEnter Distance From vertex "<<i<<" to "<<j<<" ::\t";
			cin>>adj[i][j];
			adj[j][i]=adj[i][j];
		}
	}
	cout<<"\n\n==>> Entered Adjacency Matrix\n";
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout<<setw(3)<<"("<<adj[i][j]<<")";
		}
		cout<<endl;
	}
	cout<<"\nEnter the source Vertex::";
	cin>>source;
}

void sort(){
	for(int p=0;p<n;p++){
		for(int q=0;q<n;q++){
	 		if(v[arr[p]].dist>v[arr[q]].dist){
	 			int temp=arr[p];
	 			arr[p]=arr[q];
	 			arr[q]=temp;
	 		}
		}
	}
}

void FindShortestPath(){
	for(int i=0; i<n; i++){
		v[i].dist=99999; 
		v[i].visited = 0;
		arr[i]=i;
	}
	v[source].dist=0;
	int k;
	while(array_size>0){
		sort();
		k=arr[array_size--];
		v[k].visited=1;						//mark this vertex as visited
		for(int i=0 ; i <n; i++){
			if(i!=k && adj[k][i]>0 && v[i].visited==0){
				if(v[i].dist>v[k].dist + adj[k][i]){
					v[i].dist=v[k].dist + adj[k][i];
				}
			}
		}	
	}
}

void result(){
	cout<<"\n<<== SHORTEST PATH ==>>\n";
	for(int i=0;i<n;i++){
		cout <<"\n==>> Vertex no. " <<i<< " Shortest distance from Source "<<source<<"  is ::\t"<< v[i].dist;
	}
}
int main(){
	input();
	FindShortestPath();
	result();
	return 0;	
}









