////crc


#include<iostream>
#include<cstdlib>
#include<cstring>

using namespace std;

int main() 
{



   cout<<"1. USE CRC-12 AS GENERATOR POLYNOMIAL"<<endl;
   cout<<"2. USE CRC-16 AS GENERATOR POLYNOMIAL"<<endl;
   cout<<"3. USE CRC-32 AS GENERATOR POLYNOMIAL"<<endl;
   cout<<"\n\nSELECT ONE OPTION FROM ABOVE  "<<endl;

int ch;
cin>>ch;


	
	int *g;
	
	int gs;

int arr1[] ={1,1,0,0,0,0,0,0,0,1,1,1,1};
int  arr2[]={1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,};

int arr3[]={1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1};

do{

switch(ch)
{


case 1 :   gs=12+1;
    
           g = arr1;
           
           break;

case 2  :  gs =16+1;
          
            g = arr2;
          
           break;

case 3  :  gs =32+1;
          
            g = arr3;
          
           break;


default :  cout<<"\n\nWRONG CHOICE!!!! "<<endl;

}

}while(ch>3);




	int i, j, k=0;

	int rs=gs-1;
	
	int n;	//No. of user entered bits

	
	
	
	/////////////////////////////////   Sender Side    //////////////////////////////////////

	cout<<"\n\n<<<------------------ Sender Side ------------------------->>>\n\n";

	cout<<"\nEnter no. of bits in your data: ";
	cin>>n;
	
	int t=n+rs;
	
	int a[t];
	int aTemp[t];
	int R[rs];
	
	int acopy[n+rs];
	
	char temp;
	cout<<"Enter your data bit by bit: \n";
	cin>>temp;



	do{
		if(temp=='0'|| temp=='1') {
			a[k++] = (int) (temp-'0');
		}
		else {
			cout<<"Invalid Data!!!\nTry Again...\n";
		}

		if(k>=n){
			break;
		}

		cin>>temp;

	}while(true);

	cout<<"Entered Data: ";
	for(int i=0; i<n;++i) {
		cout<<a[i];
	}
	
	cout<<"\nDivisor: ";
	for(int i=0; i<gs;++i) {
		cout<<g[i];
	}
	
	for(int i=n; i<n+rs;++i) {
		a[i]=0;
	}
	
		
	for(int i=0; i<n+rs;++i) {
		
		if(a[i]==0) {
			acopy[i]=0;
			aTemp[i]=0;
		}
		else {
			acopy[i]=1;
			aTemp[i]=1;	
		}

	}
	
	
	//Dividing
	for(i=0;i<n;i++)
    {
        j=0;
        k=i;
        //check whether it is divisible or not
        if (aTemp[k]>=g[j])
        {
            for(j=0,k=i;j<gs;j++,k++)
            {
            	//xor
                if((aTemp[k]==1 && g[j]==1) || (aTemp[k]==0 && g[j]==0))
                {
                    aTemp[k]=0;
                }
                else
                {
                    aTemp[k]=1;
                }
            }
        }
    }
    
    
	//Extracting Remainder
    for(i=0,j=n;i<rs;i++,j++)
    {
        R[i]=aTemp[j];
    }
 
/*cout<<endl;
    for(i=0;i<rs;i++)
    {
        cout<<R[i];
    }*/
    
    
    k=0;
    //addding remainder
    for(int i = n; i < n+rs; ++i) {
    	a[i] = a[i]+R[k++];

	}
	
		
	cout<<"\nSent Data: ";
	for(i=0;i<n+rs;i++) {
        cout<<a[i];
    }
    
    
    //////////////////////////////////  Reciever Side   /////////////////////////////////
    
    

    
    cout<<"\n\n<<<------------------ Reciever Side ------------------------->>>\n\n";
    int sum=n+rs;

    //Generating error

    int r = rand()%sum;
    if(a[r]==0){
        a[r]=1;

    }
    else{
        a[r]=0;
    }
  
   
    
    cout<<"\nReceived Data: ";
	for(i=0;i<n+rs;i++) {
        cout<<a[i];
    }
    
	
	
    cout<<"\n\tChecking Recieved Data......"<<endl;
    
    //Dividing
    for(i=0;i<n;i++)
    {
        j=0;
        k=i;
        //check whether it is divisible or not
        if (a[k]>=g[j])
        {
            for(j=0,k=i;j<gs;j++,k++)
            {
                if((a[k]==1 && g[j]==1) || (a[k]==0 && g[j]==0))
                {
                    a[k]=0;
                }
                else
                {
                    a[k]=1;
                }
            }
        }
    }
    
    
    for(i=0,j=n;i<rs;i++,j++)
    {
        R[i]=a[j];
    }
    
    int f=0;
    for(i=0;i<rs;i++)
    {
        if(R[i] != 0) {
        	f=1;
        	break;
		}
    }
    
    if(f) {
    	cout<<"Recieved Data is Corrupted!!!!!!"<<endl;
	}
	else {
		cout<<"Recieved Data is Correct"<<endl;
	}
}






////parity

#include<iostream>
#include<cstring>
#include<cstdlib>
using namespace std;

int main() {


    int k=0, count=0,p;
    string par;
    char temp;

    int n;

    cout<<"Enter number of bits of data: ";
    cin>>n;

    int a[n];

    cout<<"Enter data (0/1):\n";
    cin>>temp;

    do{

        if(temp=='0'||temp=='1'){

            a[k++]=((int)temp-48);
        }
        else{

            cout<<"Invalid Input!!  Try Again..\n";
        }

        if(k>=n){

            break;
        }
            cin>>temp;


    }while(true);

    cout<<"Entered data: ";
    for(int i=0; i<n;++i){

        cout<<a[i];
    }
    cout<<endl;


    cout<<"Enter parity (even/odd):\n";
    cin>>par;



    for(int i=0; i<n;++i){
        if(a[i]==1){

            count++;
        }
    }

    if(par.compare("even")==0) {

        if(count%2==0){
            p=0;
        }
        else{
            p=1;
        }

    }

    else {

        if(count%2==0){
            p=1;
        }
        else{
            p=0;
        }

    }

    cout<<"Code Word: ";
    for(int i=0; i<n;++i){

        cout<<a[i];
    }
    cout<<p<<endl;


    int r = (rand()%n);
    if(a[r]==0){
        a[r]=1;

    }
    else{
        a[r]=0;
    }

    cout<<"Recieved Data: ";
    for(int i=0; i<n;++i){

        cout<<a[i];
    }
    cout<<p<<endl;

    cout<<"Checking...\n";
    count=0;
    for(int i=0; i<n;++i){
        if(a[i]==1){

            count++;
        }
    }


    if(par.compare("even")==0) {

        if(count%2==0 && p==0){
            cout<<"Recieved Data is correct\n";
        }
        else if((count%2)!=0 && p==1){
            cout<<"Recieved Data is correct\n";
        }
        else {
            cout<<"Recieved Data is currupted!!!!\n";

        }

    }

    else {

        if(count%2==0 && p==1){
            cout<<"Recieved Data is correct\n";
        }
        else if((count%2)!=0 && p==0){
            cout<<"Recieved Data is correct\n";
        }
        else{
            cout<<"Recieved Data is currupted!!!!\n";

        }

    }

        return 0;
    }



////haming


#include<iostream>
#include<cmath>
#include<cstdlib>

using namespace std;

int main() {

	int n;

	cout<<"\n\n<<<------------------ Sender Side ------------------------->>>\n\n";

	cout<<"Enter no. of bits in your data: ";
	cin>>n;

	int r=1;

	while(true){
		if(n+r+1<=(int)pow(2,r)){
			break;
		}
		else {
			r++;
		}
	}

	int m=n+r;

	int a[n],data[m], k=0;
	int check[r];

	for (int i=0;i<r;++i){
		check[i]=0;
	}

	for (int i=0;i<m;++i){
		data[i]=0;
	}

	char temp;
	cout<<"Enter your data bit by bit: \n";
	cin>>temp;



	do{
		if(temp=='0'|| temp=='1') {
			a[k++] = (int) (temp-'0');
		}
		else {
			cout<<"Invalid Data!!!\nTry Again...\n";
		}

		if(k>=n){
			break;
		}

		cin>>temp;

	}while(true);

	k=0;
	int p=0;
	for(int i=0;i<m;i++) {
		if ((i+1)==(int)pow(2,p)) {
			p++;
			continue;
		}
		else
		data[i]=a[k++];
	}


int ctr;
for(int i=0;i<m;i++) {

	if(data[i]==1) {

	ctr=i+1;

		for (int mask = 1; mask != 0; mask <<= 1) {
		 if ((mask & ctr) != 0) {

			if (mask==1)
			   check[0]++;
			else if(mask==2)
			   check[1]++;
			else if(mask==4)
			   check[2]++;
			else if(mask==8)
			   check[3]++;
		  }
		}
	}
}


p=0;
k=0;

for(int i=0; i<r; ++i) {

	while(k<m) {

		if(k+1==(int)pow(2,p)){

			if(check[i]%2==0)
				data[k]=1;
			else
				data[k]=0;

			k++;
			p++;
			break;
		}

		else {
			k++;
		}

	}

}



cout<<"Codeword Using Odd parity: ";
for (int i=0;i<m;++i){
		cout<<data[i];
}

int copy[m];
for (int i=0;i<m;++i) {

	copy[i]=data[i];
}

cout<<"\nData Sent: ";
for (int i=0;i<m;++i){
	cout<<copy[i];
}

int ran = (rand()%m);
    if(copy[ran]==0){
        copy[ran]=1;

    }
    else{
        copy[ran]=0;
    }
    

    cout<<"\n\n<<<------------------ Reciever Side ------------------------->>>\n\n";

 cout<<"\nData Received: ";
 for (int i=0;i<m;++i){ 
	cout<<copy[i];	
 }

cout<<"\n\tChecking............. ";

int errBit=-1;

for(int i = 0; i < m; ++i) {
	if(data[i] != copy[i]) {
		errBit = i+1;
	}
}

if(errBit != -1) {

cout<<"\nError bit: "<<errBit<<endl;

if(copy[errBit-1]==1) {
		copy[errBit-1]=0;
	}
	else {
		copy[errBit-1]=1;
	}
	
	
	cout<<"\nData after correction: ";
	for (int i=0;i<m;++i){ 
	cout<<copy[i];
	cout<<endl;	
 	}
}

else {
	cout<<"Received Data is correct";
	cout<<endl;
}

 
}




////dijkistra_sprouting





#include<iostream>
#include<iomanip>

using namespace std;

int n,source;
int **adj;

class vertex{
	public:
	int dist; 		//distance from source;
	int visited; 
};

vertex *v;
int *arr;
int array_size;

void input() {
	cout<<"Enter the number of vertices in the graph:\t";
	cin>>n;
	v=new vertex[n];
	arr=new int[n];
	array_size=n;
	adj=new int*[n];
	for(int i=0 ; i<n; i++){
		adj[i]=new int[n];
	}
	cout<<"\nEnter the Adjacency Matrix (-1 if not connected) :";
	for(int i=0;i<n;i++){
		for(int j=0;j<=i;j++){
			if(i==j){
				adj[i][j]=0;
				continue;
			}
			cout<<"\nEnter Distance From vertex "<<i<<" to "<<j<<" ::\t";
			cin>>adj[i][j];
			adj[j][i]=adj[i][j];
		}
	}
	cout<<"\n\nEntered Adjacency Matrix\n";
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout<<setw(3)<<"("<<adj[i][j]<<")";
		}
		cout<<endl;
	}
	cout<<"\nEnter the source Vertex::";
	cin>>source;
}

void sort(){
	
	for(int p=0;p<n;p++){
		
		for(int q=0;q<n;q++){
			
	 		if(v[arr[p]].dist>v[arr[q]].dist){
	 			
	 			int temp=arr[p];
	 			arr[p]=arr[q];
	 			arr[q]=temp;
	 		}
		}
	}
}

void FindShortestPath(){
	for(int i=0; i<n; i++){
		v[i].dist=99999; 
		v[i].visited = 0;
		arr[i]=i;
	}
	
	v[source].dist=0;
	int k;
	while(array_size>0){
		
		sort();
		
		k=arr[array_size--];
		v[k].visited=1;			//mark this vertex as visited
		
		for(int i=0 ; i <n; i++){
			
			if(i!=k && adj[k][i]>0 && v[i].visited==0) {
				
				if(v[i].dist>v[k].dist + adj[k][i]) {
					
					v[i].dist=v[k].dist + adj[k][i];
				}
			}
		}	
	}
}

void result(){
	cout<<"\n<<---------- SHORTEST PATH ----------->>\n";
	for(int i=0;i<n;i++) {
		
		cout <<"\nVertex no. " <<i<< " Shortest distance from Source "<<source<<"  is :"<< v[i].dist;
	}
}
int main(){
	input();
	FindShortestPath();
	result();
	return 0;	
}



////dvr



#include<iostream>
using namespace std;

int main()
{
	
	int totalV, targetV, adjV;
	
	
	cout<<"Enter the total number of routers in the network: ";
	cin>>totalV;
	cout<<"\nEnter the Vertex Whose routing table is to be Found: ";
	cin>>targetV;
	cout<<"\nEnter the number of routers adjacent to Target Vertex "<<targetV<<": ";
	cin>>adjV;
	
	int delay[adjV];
	
	int TargetDVT[totalV];
	int OutLine[totalV];
	
	int NeighbourDVT[totalV][adjV];
	
	int NeighbourNum[adjV];
	
	 for(int j = 0; j < adjV; ++j) {
	 	
	 	cout<<"\nEnter the number of "<<j+1<<"th adjacent router : ";
		cin>>NeighbourNum[j];
	 	
	 	
	 	cout<<"\nFill the routing table for router number "<<NeighbourNum[j]<<":\n";
	 	for(int i = 0; i < totalV; ++i) {

			cout<<"\n"<<i+1<<".  ";

	 		
	 		/*if(i+1 == NeighbourNum[i]) {
	 			NeighbourDVT[i][j] = 0;
	 			cout<<NeighbourDVT[i][j];
			 }*/
			 
			 //else {
			 	cin>>NeighbourDVT[i][j];
			 //}
		 }
		 
		 
		cout<<"\nEnter the Delay from Target router "<<targetV<<" to Adjacent Vertex "<<NeighbourNum[j]<<": ";
		cin>>delay[j];	 
		
	}
	
	int i, j, min, Outgoingline;
	
	for(i = 0; i < totalV; ++i) {
		
		min = 100000;
		
		if(i+1 != targetV) {
			
		
		
			 for(j = 0; j < adjV; ++j) {
		 		
		 			if(min > NeighbourDVT[i][j] + delay[j]) {
		 				min = NeighbourDVT[i][j] + delay[j];
		 				Outgoingline = NeighbourNum[j];
					 }
			}
		
		
			TargetDVT[i] = min;
			OutLine[i] = Outgoingline;
		}
		
		else {
			
			TargetDVT[i] = 0;
			OutLine[i] = 0;
		}
		
	}
	
		cout<<"\n\nRecieved Vector Tables: \n";
		for(j = 0; j < adjV; ++j) {
		 	
		 	cout<<"   "<<NeighbourNum[j]<<"\t";
		 }	
		 
		 cout<<"\n\n";
		 
	for(i = 0; i < totalV; ++i) {
		
		cout<<i+1<<". ";
				
		 for(j = 0; j < adjV; ++j) {
		 	
		 	cout<<NeighbourDVT[i][j]<<"\t";
		 }
cout<<endl;	
}
	
	
	cout<<"\n\nRouting table for "<<targetV<<" is :"<<endl;
	for(int i = 0; i < totalV; i++) {
				
			cout<<"\n"<<TargetDVT[i]<<"\t"<<OutLine[i];		
	}
	
	
	return 0;
	
}
	
	

//gobackn


#include<iostream>
#include<cstdlib>
#include<cmath>
using namespace std;

const int TOT_FRAMES=500;
const int FRAMES_SEND=16;

class GoBackN{
	private:
		int fr_send_at_instance;
		int arr[TOT_FRAMES];
  		int arr1[FRAMES_SEND];
  		int sw;	
  		int rw; 
	public:
  		GoBackN() {
  			
  			sw = 0;
			rw = 0;
		  };
  		void input();
  		void sender(int m);
		void reciever(int m);
};


void GoBackN :: input(){
	
 	int n; 
 	int m;  
	
		cout <<"\nEnter the number of bits for the Sequence Number :";
 		cin >> n;
 		
	m = pow (2 , n);
	int t = 0;
	fr_send_at_instance=m-1; 
	
	cout<<"\nNumber of frames sent in one go: "<<fr_send_at_instance<<"\n\n";
	for (int i = 0 ; i < TOT_FRAMES ; i++){
		arr[i] = t;
		t = (t + 1) % m; 
	}
	sender(m);
}

void GoBackN :: sender(int m) {
	cout<<"\n<<-------- SENDER --------->>\n";
	int j = 0;
	
	for (int i = sw ; i < sw + fr_send_at_instance ; i++) {
		arr1[j++] = arr[i];
	}
	
	for (int i = 0 ; i < j ; i++){
		cout << "SENDER : Frame " <<arr1[i]<<" SENT!!!\n";		
	}
	
	reciever (m);
}

void GoBackN :: reciever(int m){
	cout<<"\n\t\t\t\t<<--------- RECIEVER --------->>\n";

	srand(rw); 

	int f = rand() % fr_send_at_instance;


	if (f != 3 ){

		int i=0;

		for (i = 0; i < fr_send_at_instance; i++){
			if (rw == arr1[i]){
				cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " recieved correctly\n";
				rw = (rw + 1) % m;
			}else{
				cout << "\t\t\t\tRECIEVER : Duplicate frame " << arr1[i] << " discarded\n";
			}
		}

		f = rand() % fr_send_at_instance;

   
		if (f>fr_send_at_instance/2){

			cout << "\t\t\t\t(Acknowledgement " << arr1[f] << " & all after this lost)\n";
			cout << "\t\t\t\t (SENDER TIMEOUTS --> RESEND THE FRAME)\n";
			sw = arr1[f];
		}

		else{
			sw = (sw + fr_send_at_instance) % m;
			cout << "\t\t\t\t(Acknowledgement " << arr[rw] << " is Sent!!!)\n";
		}
	}
	
	else {
		
		int f1 = rand() % fr_send_at_instance;

   		
		for (int i = 0 ; i < f1 ; i++) {
			if (rw == arr1[i]){
				cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " recieved correctly\n";
				rw = (rw + 1) % m;
			}
			
			else {
				cout << "\t\t\t\tRECIEVER : Duplicate frame " << arr1[i] << " discarded\n";
			}
  		}

		f = rand() % 2;
		

		if (f == 0){
			cout<<"\t\t\t\tRECIEVER : Frame " << arr1[f1] << " damaged\n";
			cout<<"\n\t\t\t\tRECIEVER : Damaged frame " << arr1[f1] << " discarded\n\n";
		}
		
		else
			cout << "\t\t\t\t            (Frame " << arr1[f1] << " lost)\n";
			
			
		for (int i = f1 + 1 ; i < fr_send_at_instance ; i++)
			cout << "\t\t\t\tRECIEVER : Frame " << arr1[i] << " discarded\n";
			
			
		cout << "\t\t\t\t (SENDER TIMEOUTS --> RESEND THE FRAME)\n";
		sw = arr1[f1];
	}
	
	char ch;
	cout<<"\nDo you want to continue(y/n) ::\t";
	cin>>ch;
	if(ch=='y')
		sender(m);
	else
		exit(0);
}
int main(){
	
	GoBackN g;
	g.input();
	return 0;
}



///modulo

#include<iostream>

using namespace std;

int main() 
{

	int n;
		int i, j, k=0;

	cout<<"Enter no. of bits in your data: ";
	cin>>n;
	
	int a[n];
	
	char temp;
	cout<<"Enter your data bit by bit: \n";
	cin>>temp;



	do{
		if(temp=='0'|| temp=='1') {
			a[k++] = (int) (temp-'0');
		}
		else {
			cout<<"Invalid Data!!!\nTry Again...\n";
		}

		if(k>=n){
			break;
		}

		cin>>temp;

	}while(true);



	
	int g[] = {1, 0, 0, 1};
	
	int gs=4, rs=gs-1;

	
	int t[n+rs];

	
	
	for(i=0;i<n;i++)
    	{
		j=0;
		k=i;
		
        //check whether it is divisible or not
        if (t[k]>=g[j])
        {
            for(j=0, k=i; j<rs; j++, k++)
            {
                if((t[k]==1 && g[j]==1) || (t[k]==0 && g[j]==0))
                {
                    t[k]=0;
                }
                else
                {
                    t[k]=1;
                }
            }
        }
    }
    

    int R[rs];
    for(i=0,j=n;i<rs;i++,j++)
    {
        R[i]=t[j];
    }
 
    
    cout<<"Remainder: ";
    for(int i=0; i < rs; ++i)
    {
        cout<<R[i];
    }
    
}



///selrep

#include<iostream>
#include<cstdlib>
#include<cmath>

const int TOT_FRAMES=500;
const int FRAMES_SEND=16;

using namespace std;
class selRpeat{
	private:
		int fr_send_at_instance;
		int arr[TOT_FRAMES];
		int send[FRAMES_SEND];
		int rcvd[FRAMES_SEND];
		char rcvd_ack[FRAMES_SEND];
		int sw;
		int rw;       
	public:
		void input();
		void sender(int);
		void receiver(int);
};

void selRpeat::input(){
	int n;     
	int m;    


		cout <<"\n\nEnter the number of bits for the Sequence Number:\t";
		cin >> n;
		

	m=pow(2,n-1);
	int t=0;
	fr_send_at_instance=m;
	
	cout<<"\nNumber of frames sent in one go: "<<fr_send_at_instance<<"\n\n";


	for(int i=0;i<TOT_FRAMES;i++){
		
		arr[i]=t;
		t=(t+1)%m;
		
	}
	for(int i=0;i<fr_send_at_instance;i++){
		
		send[i]=arr[i];
		rcvd[i]=arr[i];
		rcvd_ack[i]='n';
	}
	
	rw=sw=fr_send_at_instance;
	sender(m);
}


void selRpeat::sender(int m){
	
	cout<<"\n<<-------- SENDER --------->>\n";

	for(int i=0;i<fr_send_at_instance;i++){
		if(rcvd_ack[i]=='n')
			cout<<"SENDER : Frame "<<send[i]<<" is sent\n";
	}
	receiver(m);
}


void selRpeat::receiver(int m) {
	
	cout<<"\n\t\t\t\t<<--------- RECIEVER --------->>\n";
	
	time_t t;
	int f,j,f1,a1;
	char ch;


	for(int i=0;i<fr_send_at_instance;i++){
		
		if(rcvd_ack[i]=='n'){
			f=rand()%10;
		
		
			if(f!=5){
				for(j=0;j<fr_send_at_instance;j++){
					if(rcvd[j]==send[i]) {
						
						cout<<"\t\tReciever : Frame "<<rcvd[j]<<" recieved correctly!!!\n";
						rcvd[j]=arr[rw];
						rw=(rw+1)%m;
						break;
					}
				}
				
				if(j==fr_send_at_instance)
					cout<<"\t\tReciever : Duplicate Frame "<<send[i]<<" discarded!!!\n";
					
				a1=rand()%5;
				
				
				if(a1==3) {
					cout<<"\t\t(Acknowledgement "<<send[i]<<" lost)\n";
					cout<<"\t\t(Sender timeouts-->Resend the frame)\n";
					rcvd_ack[i]='n';
				}
				
				else {
					cout<<"\t\t(Acknowledgement "<<send[i]<<" recieved)\n";
					rcvd_ack[i]='p';
				}
				
			}
			
			else{
				int ld=rand()%2;
				
				
				if(ld==0){
					cout<<"\t\tReceiver : Frame "<<send[i]<<" is damaged\n";
					cout<<"\t\tReceiver : Negative Acknowledgement "<<send[i]<<" sent\n";
				}else{
					cout<<"\t\t  (Frame : "<<send[i]<<" is lost)\n";
					cout<<"\t\t(Sender Timeout ----> please resend frame)\n";
				}
				rcvd_ack[i]='n';
			}
		}
	}
	for(j=0;j<fr_send_at_instance;j++) {
		
		if(rcvd_ack[j]=='n')
			break;
	}
	int i=0;
	for(int k=j;k<fr_send_at_instance;k++) {
		send[i]=send[k];
		if(rcvd_ack[k]=='n')
			rcvd_ack[i]='n';
		else
			rcvd_ack[i]='p';
			i++;
	}
	
	if(i!=fr_send_at_instance ){
		
		for(int k=i;k<fr_send_at_instance;k++){
			send[k]=arr[sw];
			sw=(sw+1)%m;
			rcvd_ack[k]='n';
		}
	}
	cout<<"\nDo you want to continue ::\t";
	cin>>ch;
	cout<<"\n";
	if(ch=='y')
		sender(m);
	else
		exit(0);
}


int main(){
	selRpeat sr;
	sr.input();
}


///shortp

#include<iostream>
#include<iomanip>

using namespace std;

int n,source;
int **adj;

class vertex{
	public:
	int dist; 		//distance from source;
	int visited; 
};

vertex *v;
int *arr;
int array_size;

void input() {
	cout<<"Enter the number of vertices in the graph:\t";
	cin>>n;
	v=new vertex[n];
	arr=new int[n];
	array_size=n;
	adj=new int*[n];
	for(int i=0 ; i<n; i++){
		adj[i]=new int[n];
	}
	cout<<"\nEnter the Adjacency Matrix (-1 if not connected) :";
	for(int i=0;i<n;i++){
		for(int j=0;j<=i;j++){
			if(i==j){
				adj[i][j]=0;
				continue;
			}
			cout<<"\nEnter Distance From vertex "<<i<<" to "<<j<<" ::\t";
			cin>>adj[i][j];
			
			adj[j][i]=adj[i][j];
		}
	}
	cout<<"\n\nEntered Adjacency Matrix\n";
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout<<"("<<adj[i][j]<<")";
		}
		cout<<endl;
	}
	cout<<"\nEnter the source Vertex::";
	cin>>source;
}

void sort(){
	
	for(int p=0;p<n;p++){
		
		for(int q=0;q<n;q++){
			
	 		if(v[arr[p]].dist > v[arr[q]].dist){
	 			
	 			int temp=arr[p];
	 			arr[p]=arr[q];
	 			arr[q]=temp;
	 		}
		}
	}
}

void FindShortestPath(){
	
	for(int i=0; i<n; i++){
		v[i].dist=99999; 
		v[i].visited = 0;
		arr[i]=i;
	}
	
	v[source].dist=0;
	int k;
	while(array_size > 0){
		
		sort();
		
		k=arr[array_size--];
		v[k].visited=1;			//mark this vertex as visited
		
		for(int i=0 ; i <n; i++){
			
			if(i!=k && adj[k][i]>0 && v[i].visited==0) {
				
				if(v[i].dist>v[k].dist + adj[k][i]) {
					
					v[i].dist=v[k].dist + adj[k][i];
				}
			}
		}	
	}
}

void result(){
	
	cout<<"\n<<---------- SHORTEST PATH ----------->>\n";
	
	for(int i=0;i<n;i++) {
		
		cout <<"\nVertex no. " <<i<< " Shortest distance from Source "<<source<<"  is :"<< v[i].dist;
	}
}
int main(){
	input();
	FindShortestPath();
	result();
	return 0;	
}


//snw

#include<iostream>
using namespace std;


class Receiver
{
	int ack;
	
	public:
		void receive(int x)
		{
			cout<<"\n\t\t\t\t\t\tReceived "<<x;
			ack=x;
		}
		
		int feedback()
		{
			cout<<"\n\t\t\t\t\t\tSending Ack"<<1-ack;
			return (1-ack);
		}
};


class Sender
{
	int c;
	Receiver r;
	
	public:
		Sender()
		{
			c=0;
		}
		void send()
		{
			cout<<"\nSending "<<c;

			r.receive(c);
		}
		
		void getAck()
		{
			c=r.feedback();
			cout<<"\nReceived Ack "<<c;
		}
};


int main()
{
	int num;
	Sender s;
	cout<<"\t\tSTOP AND WAIT NOISELESS";
	cout<<"\n\nEnter number of packets to be sent :\t";
	cin>>num;
	cout<<"\n\nSENDER\t\t\t\t\t\tRECEIVER";
	
	for(int i=0;i<num;i++){
		cout<<"\n==>>PACKET "<<(i+1);
		s.send();
		s.getAck();
	}

	cout<<"\n\n-----TRANSMISSION COMPLETE------\n";
	return 0;
}


////snwnoisy

#include<iostream>
#include<cstdlib>

using namespace std;

int r=1;
int receiver(int seq){



    int x=rand()%10;

    if(x<5){
        cout<<"\n\t\t\t\t\tReceived frame with sequence no :: "<<seq;
        r=1-r;
        cout<<"\n\t\t\t\t\tACKNOWLEDGMENT "<<r<<" sending";
    }

    else if(x>5&&x<8){
        cout<<"\n\t\t\t\t\tFrame lost!!";
        cout<<"\n\t\t\t\t\tTimeout!!!";
    }

    else{
    	cout<<"\n\t\t\t\t\tAcknowledgement lost!!";
        cout<<"\n\t\t\t\t\tTimeout!!!";
    }
    return r;
}


void sender(){
    int n;
    cout<<"\t\t-----Sender------\n";
    
    cout<<"\nEnter the number of frames :: ";
    cin>>n;

    int arr[n];

    for(int i=0;i<n;i++){
        if(i%2==0)
            arr[i]=1;
        else
            arr[i]=0;
    }

    for(int i=0;i<n;i++){

     	cout<<"\n\nSending frame with sequence number::"<<arr[i];

        int ack=receiver(arr[i]);

        while(ack==arr[i]){

     		cout<<"\n\nResending frame with sequence number "<<arr[i];
     		ack=receiver(arr[i]);
	}
    }
   

	cout<<"\n\n\t\t<<<----------- TRANSMISSION COMPLETE ----------------->>>";
}
int main(){
    sender();

    return 0;
}








